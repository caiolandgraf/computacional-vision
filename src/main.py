"""
Sistema de Detec√ß√£o de Mato Alto - Interface Principal
Autor: Sistema de IA
Data: 2025

Interface principal para o sistema de detec√ß√£o de √°reas com mato alto
usando vis√£o computacional.
"""

import cv2
import numpy as np
import os
import sys
from pathlib import Path
from typing import Optional, List, Dict, Any
import logging
import argparse
from datetime import datetime

# Adiciona o diret√≥rio src ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from capture import ImageCapture
from detector import GrassDetector
from visualizer import ResultVisualizer

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class GrassDetectionSystem:
    """Sistema principal de detec√ß√£o de mato alto."""
    
    def __init__(self):
        """Inicializa o sistema."""
        self.capture = ImageCapture()
        self.detector = GrassDetector()
        self.visualizer = ResultVisualizer()
        
        # Configura√ß√µes
        self.output_dir = Path("output")
        self.output_dir.mkdir(exist_ok=True)
        
        # Modo de visualiza√ß√£o padr√£o
        self.visualization_mode = 'bounding_box'  # 'bounding_box' ou 'overlay'
        
        self.detection_methods = {
            '1': 'color',
            '2': 'texture', 
            '3': 'combined',
            '4': 'deeplearning'
        }
        
        logger.info("Sistema de Detec√ß√£o de Mato Alto inicializado")
    
    def display_menu(self) -> None:
        """Exibe menu principal."""
        print("\n" + "="*60)
        print("üåø SISTEMA DE DETEC√á√ÉO DE MATO ALTO üåø")
        print("="*60)
        print("1. Analisar foto espec√≠fica")
        print("2. Processar v√≠deo completo")
        print("3. Captura em tempo real (webcam)")
        print("4. An√°lise em lote (pasta de imagens)")
        print("5. Comparar m√©todos de detec√ß√£o")
        print("6. Configura√ß√µes")
        print("7. Alternar modo visual")
        print("8. Ajuda")
        print("0. Sair")
        print("="*60)
        current_mode = "Dashboard Moderno" if self.visualization_mode == 'bounding_box' else "Overlay Cl√°ssico"
        print(f"üé® Modo atual: {current_mode}")

    def toggle_visualization_mode(self) -> None:
        """Alterna entre os modos de visualiza√ß√£o."""
        print("\nüé® SELE√á√ÉO DE MODO VISUAL")
        print("="*40)
        print("1. Dashboard Moderno (bounding boxes + cards)")
        print("2. Overlay Cl√°ssico Melhorado (sobreposi√ß√£o)")
        print("="*40)
        
        while True:
            choice = input("Escolha o modo visual (1-2): ").strip()
            if choice == '1':
                self.visualization_mode = 'bounding_box'
                print("‚úÖ Modo Dashboard Moderno ativado!")
                break
            elif choice == '2':
                self.visualization_mode = 'overlay'
                print("‚úÖ Modo Overlay Cl√°ssico ativado!")
                break
            else:
                print("‚ùå Op√ß√£o inv√°lida. Digite 1 ou 2.")
    
    def display_detection_menu(self) -> str:
        """Exibe menu de m√©todos de detec√ß√£o."""
        print("\nüîç M√âTODOS DE DETEC√á√ÉO:")
        print("1. Baseado em cores (r√°pido)")
        print("2. Baseado em textura (preciso)")
        print("3. Combinado (recomendado)")
        print("4. Deep Learning (experimental)")
        
        while True:
            choice = input("\nEscolha o m√©todo (1-4): ").strip()
            if choice in self.detection_methods:
                return self.detection_methods[choice]
            print("Op√ß√£o inv√°lida. Tente novamente.")
    
    def analyze_single_image(self) -> None:
        """Analisa uma √∫nica imagem."""
        print("\nüì∑ AN√ÅLISE DE IMAGEM √öNICA")
        
        # Solicita caminho da imagem
        image_path = input("Digite o caminho da imagem: ").strip().strip('"')
        
        if not Path(image_path).exists():
            print(f"‚ùå Arquivo n√£o encontrado: {image_path}")
            return
        
        # Carrega imagem
        image = self.capture.load_image(image_path)
        if image is None:
            print("‚ùå Erro ao carregar imagem")
            return
        
        # Escolhe m√©todo de detec√ß√£o
        method = self.display_detection_menu()
        
        print(f"\nüîÑ Processando imagem com m√©todo: {method}...")
        
        try:
            # Executa detec√ß√£o
            mask, stats = self.detector.detect_grass_areas(image, method)
            
            # Analisa densidade
            density_analysis = self.detector.analyze_grass_density(mask)
            
            # Calcula confian√ßa
            confidence = self.detector.get_detection_confidence(stats)
            
            # Cria visualiza√ß√µes
            overlay_viz = self.visualizer.create_overlay_visualization(image, mask, stats)
            detailed_viz = self.visualizer.create_detailed_analysis_panel(
                image, mask, stats, density_analysis, visualization_type='bounding_box')
            
            # Exibe resultados
            print("\n‚úÖ RESULTADOS DA AN√ÅLISE:")
            print(f"   M√©todo: {method}")
            print(f"   Cobertura: {stats['coverage_percentage']:.2f}%")
            print(f"   Confian√ßa: {confidence:.2f}")
            print(f"   Densidade: {density_analysis['density_classification']}")
            print(f"   Regi√µes detectadas: {density_analysis['num_regions']}")
            
            # Salva resultados
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = Path(image_path).stem
            
            output_overlay = self.output_dir / f"{filename}_overlay_{timestamp}.jpg"
            output_detailed = self.output_dir / f"{filename}_detailed_{timestamp}.jpg"
            
            self.visualizer.save_visualization(overlay_viz, str(output_overlay))
            self.visualizer.save_visualization(detailed_viz, str(output_detailed))
            
            print(f"   Resultados salvos em: {self.output_dir}")
            
            # Exibe visualiza√ß√£o
            if input("\nDeseja visualizar os resultados? (s/n): ").lower().startswith('s'):
                self.visualizer.display_results(detailed_viz, "An√°lise Detalhada")
            
        except Exception as e:
            logger.error(f"Erro na an√°lise: {str(e)}")
            print(f"‚ùå Erro durante a an√°lise: {str(e)}")
    
    def process_video(self) -> None:
        """Processa um arquivo de v√≠deo."""
        print("\nüé• PROCESSAMENTO DE V√çDEO")
        
        video_path = input("Digite o caminho do v√≠deo: ").strip().strip('"')
        
        if not Path(video_path).exists():
            print(f"‚ùå Arquivo n√£o encontrado: {video_path}")
            return
        
        method = self.display_detection_method()
        
        # Configura√ß√µes de processamento
        process_every_n_frames = int(input("Processar a cada N frames (padr√£o: 30): ") or "30")
        save_frames = input("Salvar frames processados? (s/n): ").lower().startswith('s')
        
        print(f"\nüîÑ Processando v√≠deo...")
        
        try:
            frame_count = 0
            processed_count = 0
            total_coverage = 0
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            video_name = Path(video_path).stem
            
            for frame_number, frame in self.capture.process_video_file(video_path):
                frame_count += 1
                
                # Processa apenas frames selecionados
                if frame_count % process_every_n_frames != 0:
                    continue
                
                processed_count += 1
                print(f"Processando frame {frame_number}...", end='\r')
                
                # Detecta mato
                mask, stats = self.detector.detect_grass_areas(frame, method)
                total_coverage += stats['coverage_percentage']
                
                # Salva frame se solicitado
                if save_frames:
                    viz = self.visualizer.create_overlay_visualization(frame, mask, stats)
                    frame_path = self.output_dir / f"{video_name}_{timestamp}_frame_{frame_number:06d}.jpg"
                    self.visualizer.save_visualization(viz, str(frame_path))
            
            # Estat√≠sticas finais
            avg_coverage = total_coverage / processed_count if processed_count > 0 else 0
            
            print(f"\n‚úÖ PROCESSAMENTO CONCLU√çDO:")
            print(f"   Total de frames: {frame_count}")
            print(f"   Frames processados: {processed_count}")
            print(f"   Cobertura m√©dia: {avg_coverage:.2f}%")
            
            if save_frames:
                print(f"   Frames salvos em: {self.output_dir}")
            
        except Exception as e:
            logger.error(f"Erro no processamento do v√≠deo: {str(e)}")
            print(f"‚ùå Erro durante o processamento: {str(e)}")
    
    def webcam_realtime(self) -> None:
        """Captura e an√°lise em tempo real da webcam."""
        print("\nüìπ CAPTURA EM TEMPO REAL")
        
        # Lista c√¢meras dispon√≠veis
        cameras = self.capture.get_available_cameras()
        if not cameras:
            print("‚ùå Nenhuma c√¢mera encontrada")
            return
        
        print("C√¢meras dispon√≠veis:", cameras)
        camera_index = int(input(f"Escolha a c√¢mera (padr√£o: {cameras[0]}): ") or cameras[0])
        
        method = self.display_detection_menu()
        
        # Menu de modo de qualidade
        print("\nüéØ MODO DE QUALIDADE:")
        print("1. Tempo real (r√°pido, precis√£o m√©dia)")
        print("2. Alta precis√£o (lento, qualidade m√°xima)")  
        print("3. Adaptativo (escolha autom√°tica)")
        
        quality_mode = input("Escolha o modo (1-3, padr√£o: 3): ").strip() or "3"
        
        # Configura√ß√µes de qualidade
        if quality_mode == "1":
            # Modo tempo real for√ßado
            self.detector.set_realtime_mode(True)
            realtime_mode = True
            print("üöÄ Modo tempo real selecionado - priorizando velocidade")
        elif quality_mode == "2":
            # Modo alta precis√£o for√ßado
            self.detector.set_precision_mode(True)
            realtime_mode = False
            print("üéØ Modo alta precis√£o selecionado - priorizando qualidade")
        else:
            # Modo adaptativo (padr√£o anterior)
            realtime_mode = method in ['texture', 'combined', 'deeplearning']
            if realtime_mode:
                print("ü§ñ Modo adaptativo: tempo real ativado para melhor performance")
                self.detector.set_realtime_mode(True)
            else:
                print("‚ö° Modo adaptativo: alta qualidade para m√©todo r√°pido")
                self.detector.set_precision_mode(True)
        
        # Configura√ß√µes
        save_detections = input("Salvar detec√ß√µes interessantes? (s/n): ").lower().startswith('s')
        min_coverage_to_save = 10.0  # Salva apenas se cobertura > 10%
        
        print(f"\nüîÑ Iniciando captura...")
        print("üéÆ CONTROLES: 'Q'=sair, 'S'=salvar, 'V'=trocar visual, 'M'=modo precis√£o, 'H'=ajuda")
        print("üëÅÔ∏è  Mantenha a janela de v√≠deo em foco para usar os controles!")
        print("‚è≥ Aguarde alguns segundos para a webcam inicializar...")
        
        # Pr√©-cria a janela para garantir foco
        cv2.namedWindow('Detec√ß√£o de Mato - Tempo Real', cv2.WINDOW_AUTOSIZE)
        cv2.moveWindow('Detec√ß√£o de Mato - Tempo Real', 100, 100)
        
        # Exibe imagem de aguardo
        waiting_img = np.zeros((480, 640, 3), dtype=np.uint8)
        waiting_img[:] = (40, 40, 40)
        cv2.putText(waiting_img, "INICIANDO WEBCAM...", (180, 220), cv2.FONT_HERSHEY_DUPLEX, 1, (255, 255, 255), 2)
        cv2.putText(waiting_img, "Aguarde alguns segundos", (200, 260), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (200, 200, 200), 1)
        cv2.imshow('Detec√ß√£o de Mato - Tempo Real', waiting_img)
        cv2.waitKey(2000)  # Aguarda 2 segundos
        
        try:
            saved_count = 0
            frame_count = 0
            
            for frame in self.capture.capture_from_webcam(camera_index, realtime_mode):
                frame_count += 1
                
                # Processa frames com frequ√™ncia ajustada ao modo
                skip_factor = 3 if realtime_mode else 1  # Alta precis√£o processa todos os frames
                if frame_count % skip_factor != 0:
                    cv2.imshow('Webcam - Original', frame)
                    if cv2.waitKey(1) & 0xFF == ord('q'):
                        break
                    continue
                
                # Detecta mato
                mask, stats = self.detector.detect_grass_areas(frame, method)
                
                # Analisa densidade para o painel detalhado
                density_analysis = self.detector.analyze_grass_density(mask)
                
                # Cria visualiza√ß√£o baseada no modo selecionado
                viz = self.visualizer.create_detailed_analysis_panel(frame, mask, stats, 
                                                                   density_analysis,
                                                                   visualization_type=self.visualization_mode)
                
                # Adiciona informa√ß√µes na tela
                coverage = stats['coverage_percentage']
                confidence = self.detector.get_detection_confidence(stats)
                
                # Status detalhado
                mode_text = ""
                if self.detector.precision_params['enabled']:
                    mode_text = " | ALTA PRECIS√ÉO"
                elif self.detector.realtime_params['enabled']:
                    mode_text = " | TEMPO REAL"
                
                status_text = f"Cobertura: {coverage:.1f}% | Confianca: {confidence:.3f}{mode_text}"
                
                cv2.putText(viz, status_text, (10, viz.shape[0] - 20), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)
                
                # Exibe resultado
                cv2.imshow('Detec√ß√£o de Mato - Tempo Real', viz)
                
                # Garante que a janela est√° em foco para capturar teclas
                cv2.setWindowProperty('Detec√ß√£o de Mato - Tempo Real', cv2.WND_PROP_TOPMOST, 1)
                cv2.setWindowProperty('Detec√ß√£o de Mato - Tempo Real', cv2.WND_PROP_TOPMOST, 0)
                
                # Salva detec√ß√µes interessantes automaticamente
                if save_detections and coverage > min_coverage_to_save:
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S_%f")[:-3]
                    save_path = self.output_dir / f"webcam_detection_{timestamp}.jpg"
                    self.visualizer.save_visualization(viz, str(save_path))
                    saved_count += 1
                    print(f"Detec√ß√£o salva: {save_path}")
                
                # Controles de teclado - timeout maior para capturar melhor as teclas
                key = cv2.waitKey(30) & 0xFF
                if key == ord('q') or key == 27:  # 'q' ou ESC
                    print("üëã Saindo da captura...")
                    break
                elif key == ord('s'):
                    # Salva frame atual
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    save_path = self.output_dir / f"webcam_manual_{timestamp}.jpg"
                    self.visualizer.save_visualization(viz, str(save_path))
                    print(f"üì∏ Frame salvo: {save_path}")
                elif key == ord('m'):
                    # Troca modo em tempo real
                    if self.detector.realtime_params['enabled']:
                        self.detector.set_precision_mode(True)
                        print("üéØ Alternado para modo alta precis√£o")
                    else:
                        self.detector.set_realtime_mode(True)
                        print("üöÄ Alternado para modo tempo real")
                elif key == ord('v'):
                    # Troca modo visual
                    if self.visualization_mode == 'bounding_box':
                        self.visualization_mode = 'overlay'
                        print("üé® Alternado para Overlay Cl√°ssico")
                    else:
                        self.visualization_mode = 'bounding_box'
                        print("üé® Alternado para Dashboard Moderno")
                elif key == ord('h'):
                    # Mostra ajuda
                    print("\nüéÆ CONTROLES DISPON√çVEIS:")
                    print("  Q ou ESC = Sair")
                    print("  S = Salvar frame atual")
                    print("  V = Alternar modo visual")
                    print("  M = Alternar modo precis√£o") 
                    print("  H = Mostrar esta ajuda")
                elif key != 255:  # Alguma tecla foi pressionada (255 = nenhuma tecla)
                    print(f"‚å®Ô∏è  Tecla '{chr(key) if 32 <= key <= 126 else key}' pressionada - Use 'H' para ajuda")
            
            print(f"\n‚úÖ Captura finalizada. {saved_count} imagens salvas.")
            
        except Exception as e:
            logger.error(f"Erro na captura em tempo real: {str(e)}")
            print(f"‚ùå Erro durante a captura: {str(e)}")
        finally:
            cv2.destroyAllWindows()
    
    def batch_analysis(self) -> None:
        """An√°lise em lote de m√∫ltiplas imagens."""
        print("\nüìÅ AN√ÅLISE EM LOTE")
        
        folder_path = input("Digite o caminho da pasta: ").strip().strip('"')
        folder = Path(folder_path)
        
        if not folder.exists() or not folder.is_dir():
            print(f"‚ùå Pasta n√£o encontrada: {folder_path}")
            return
        
        method = self.display_detection_menu()
        
        # Carrega imagens
        images = self.capture.load_images_from_folder(str(folder))
        
        if not images:
            print("‚ùå Nenhuma imagem encontrada na pasta")
            return
        
        print(f"\nüîÑ Processando {len(images)} imagens...")
        
        results = []
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        try:
            for i, (filename, image) in enumerate(images):
                print(f"Processando {i+1}/{len(images)}: {filename}...", end='\r')
                
                # Detecta mato
                mask, stats = self.detector.detect_grass_areas(image, method)
                density_analysis = self.detector.analyze_grass_density(mask)
                confidence = self.detector.get_detection_confidence(stats)
                
                # Salva resultado
                name_without_ext = Path(filename).stem
                viz = self.visualizer.create_detailed_analysis_panel(
                    image, mask, stats, density_analysis)
                
                output_path = self.output_dir / f"batch_{timestamp}_{name_without_ext}.jpg"
                self.visualizer.save_visualization(viz, str(output_path))
                
                # Coleta estat√≠sticas
                results.append({
                    'filename': filename,
                    'coverage': stats['coverage_percentage'],
                    'confidence': confidence,
                    'density': density_analysis['density_classification'],
                    'regions': density_analysis['num_regions']
                })
            
            print(f"\n‚úÖ AN√ÅLISE EM LOTE CONCLU√çDA:")
            print(f"   Imagens processadas: {len(images)}")
            print(f"   Resultados salvos em: {self.output_dir}")
            
            # Estat√≠sticas gerais
            avg_coverage = sum(r['coverage'] for r in results) / len(results)
            max_coverage = max(results, key=lambda x: x['coverage'])
            
            print(f"   Cobertura m√©dia: {avg_coverage:.2f}%")
            print(f"   Maior cobertura: {max_coverage['coverage']:.2f}% ({max_coverage['filename']})")
            
            # Salva relat√≥rio
            self._save_batch_report(results, timestamp)
            
        except Exception as e:
            logger.error(f"Erro na an√°lise em lote: {str(e)}")
            print(f"‚ùå Erro durante a an√°lise: {str(e)}")
    
    def compare_methods(self) -> None:
        """Compara diferentes m√©todos de detec√ß√£o."""
        print("\nüî¨ COMPARA√á√ÉO DE M√âTODOS")
        
        image_path = input("Digite o caminho da imagem: ").strip().strip('"')
        
        if not Path(image_path).exists():
            print(f"‚ùå Arquivo n√£o encontrado: {image_path}")
            return
        
        image = self.capture.load_image(image_path)
        if image is None:
            print("‚ùå Erro ao carregar imagem")
            return
        
        print("\nüîÑ Testando todos os m√©todos...")
        
        methods = ['color', 'texture', 'combined']
        results = []
        
        try:
            for method in methods:
                print(f"Executando m√©todo: {method}...")
                mask, stats = self.detector.detect_grass_areas(image, method)
                results.append((mask, method, stats))
            
            # Cria compara√ß√£o visual
            comparison_viz = self.visualizer.create_side_by_side_comparison(image, results)
            
            # Salva compara√ß√£o
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = Path(image_path).stem
            output_path = self.output_dir / f"{filename}_comparison_{timestamp}.jpg"
            self.visualizer.save_visualization(comparison_viz, str(output_path))
            
            print("\n‚úÖ COMPARA√á√ÉO DE M√âTODOS:")
            for mask, method, stats in results:
                confidence = self.detector.get_detection_confidence(stats)
                print(f"   {method.capitalize()}: {stats['coverage_percentage']:.2f}% "
                      f"(confian√ßa: {confidence:.2f})")
            
            print(f"\n   Compara√ß√£o salva: {output_path}")
            
            # Exibe resultado
            if input("\nDeseja visualizar a compara√ß√£o? (s/n): ").lower().startswith('s'):
                self.visualizer.display_results(comparison_viz, "Compara√ß√£o de M√©todos")
            
        except Exception as e:
            logger.error(f"Erro na compara√ß√£o: {str(e)}")
            print(f"‚ùå Erro durante a compara√ß√£o: {str(e)}")
    
    def show_settings(self) -> None:
        """Exibe e permite alterar configura√ß√µes."""
        print("\n‚öôÔ∏è  CONFIGURA√á√ïES ATUAIS:")
        print(f"   Diret√≥rio de sa√≠da: {self.output_dir}")
        print(f"   M√©todos dispon√≠veis: {list(self.detection_methods.values())}")
        print(f"   C√¢meras dispon√≠veis: {self.capture.get_available_cameras()}")
        
        # Configura√ß√µes do detector
        print(f"\nüéØ PAR√ÇMETROS DO DETECTOR:")
        print(f"   √Årea m√≠nima: {self.detector.texture_params['min_area']}")
        print(f"   Threshold Sobel: {self.detector.texture_params['sobel_threshold']}")
        
        if input("\nDeseja ajustar par√¢metros? (s/n): ").lower().startswith('s'):
            try:
                new_min_area = input(f"Nova √°rea m√≠nima ({self.detector.texture_params['min_area']}): ")
                if new_min_area:
                    self.detector.texture_params['min_area'] = int(new_min_area)
                
                new_threshold = input(f"Novo threshold Sobel ({self.detector.texture_params['sobel_threshold']}): ")
                if new_threshold:
                    self.detector.texture_params['sobel_threshold'] = int(new_threshold)
                
                print("‚úÖ Configura√ß√µes atualizadas!")
                
            except ValueError:
                print("‚ùå Valores inv√°lidos")
    
    def show_help(self) -> None:
        """Exibe ajuda e informa√ß√µes do sistema."""
        print("\n" + "="*60)
        print("üÜò AJUDA - SISTEMA DE DETEC√á√ÉO DE MATO ALTO")
        print("="*60)
        print("""
üìù DESCRI√á√ÉO:
   Sistema de vis√£o computacional para identificar √°reas com mato alto
   em fotos, v√≠deos e imagens da webcam.

üéØ M√âTODOS DE DETEC√á√ÉO:
   ‚Ä¢ Baseado em cores: R√°pido, identifica tons de verde/marrom
   ‚Ä¢ Baseado em textura: Mais preciso, analisa padr√µes da imagem
   ‚Ä¢ Combinado: Recomendado, une os dois m√©todos anteriores
   ‚Ä¢ Deep Learning: Experimental, usa redes neurais

üì∑ TIPOS DE AN√ÅLISE:
   1. Foto √∫nica: An√°lise detalhada de uma imagem
   2. V√≠deo: Processamento frame a frame
   3. Webcam: An√°lise em tempo real
   4. Lote: Processamento de m√∫ltiplas imagens

üíæ RESULTADOS:
   ‚Ä¢ Imagens com √°reas destacadas salvas na pasta 'output'
   ‚Ä¢ Relat√≥rios detalhados com estat√≠sticas
   ‚Ä¢ Visualiza√ß√µes comparativas entre m√©todos

üéÆ CONTROLES (Webcam):
   ‚Ä¢ 'q' - Sair
   ‚Ä¢ 's' - Salvar frame atual

‚ö° DICAS:
   ‚Ä¢ Use imagens com boa ilumina√ß√£o para melhores resultados
   ‚Ä¢ O m√©todo 'combinado' oferece melhor equil√≠brio
   ‚Ä¢ Para v√≠deos longos, processe a cada 30+ frames
   ‚Ä¢ Ajuste os par√¢metros nas configura√ß√µes se necess√°rio
        """)
        print("="*60)
    
    def _save_batch_report(self, results: List[Dict], timestamp: str) -> None:
        """Salva relat√≥rio da an√°lise em lote."""
        report_path = self.output_dir / f"batch_report_{timestamp}.txt"
        
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write("RELAT√ìRIO DE AN√ÅLISE EM LOTE\n")
            f.write("="*50 + "\n\n")
            f.write(f"Data: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
            f.write(f"Total de imagens: {len(results)}\n\n")
            
            # Estat√≠sticas gerais
            avg_coverage = sum(r['coverage'] for r in results) / len(results)
            f.write(f"Cobertura m√©dia: {avg_coverage:.2f}%\n\n")
            
            # Detalhes por imagem
            f.write("RESULTADOS POR IMAGEM:\n")
            f.write("-" * 50 + "\n")
            
            for result in sorted(results, key=lambda x: x['coverage'], reverse=True):
                f.write(f"Arquivo: {result['filename']}\n")
                f.write(f"  Cobertura: {result['coverage']:.2f}%\n")
                f.write(f"  Confian√ßa: {result['confidence']:.2f}\n")
                f.write(f"  Densidade: {result['density']}\n")
                f.write(f"  Regi√µes: {result['regions']}\n\n")
        
        print(f"   Relat√≥rio salvo: {report_path}")
    
    def run(self) -> None:
        """Executa o sistema principal."""
        print("üåø Bem-vindo ao Sistema de Detec√ß√£o de Mato Alto!")
        print("Inicializando componentes...")
        
        # Verifica se as depend√™ncias essenciais est√£o instaladas
        try:
            import cv2
            import numpy
        except ImportError as e:
            print(f"‚ùå Depend√™ncia essencial n√£o encontrada: {e}")
            print("Execute: pip install opencv-python numpy")
            return
            
        # TensorFlow √© opcional
        try:
            import tensorflow
            print("‚úÖ TensorFlow dispon√≠vel")
        except ImportError:
            print("‚ö†Ô∏è  TensorFlow n√£o dispon√≠vel - m√©todo deep learning desabilitado")
        
        while True:
            self.display_menu()
            
            try:
                choice = input("\nEscolha uma op√ß√£o: ").strip()
                
                if choice == '1':
                    self.analyze_single_image()
                elif choice == '2':
                    self.process_video()
                elif choice == '3':
                    self.webcam_realtime()
                elif choice == '4':
                    self.batch_analysis()
                elif choice == '5':
                    self.compare_methods()
                elif choice == '6':
                    self.show_settings()
                elif choice == '7':
                    self.toggle_visualization_mode()
                elif choice == '8':
                    self.show_help()
                elif choice == '0':
                    print("üëã Obrigado por usar o sistema!")
                    break
                else:
                    print("‚ùå Op√ß√£o inv√°lida. Tente novamente.")
                    
            except KeyboardInterrupt:
                print("\n\nüëã Sistema interrompido pelo usu√°rio.")
                break
            except Exception as e:
                logger.error(f"Erro n√£o esperado: {str(e)}")
                print(f"‚ùå Erro inesperado: {str(e)}")
                print("O sistema continuar√° funcionando...")


def main():
    """Fun√ß√£o principal."""
    parser = argparse.ArgumentParser(description="Sistema de Detec√ß√£o de Mato Alto")
    parser.add_argument('--image', type=str, help='Caminho da imagem para an√°lise direta')
    parser.add_argument('--method', type=str, default='combined', 
                       choices=['color', 'texture', 'combined', 'deeplearning'],
                       help='M√©todo de detec√ß√£o')
    parser.add_argument('--output', type=str, help='Diret√≥rio de sa√≠da personalizado')
    parser.add_argument('--batch', type=str, help='Pasta para an√°lise em lote')
    
    args = parser.parse_args()
    
    # Cria sistema
    system = GrassDetectionSystem()
    
    # Configura diret√≥rio de sa√≠da personalizado
    if args.output:
        system.output_dir = Path(args.output)
        system.output_dir.mkdir(exist_ok=True)
    
    # Modo de linha de comando
    if args.image:
        print(f"Analisando imagem: {args.image}")
        image = system.capture.load_image(args.image)
        if image is not None:
            mask, stats = system.detector.detect_grass_areas(image, args.method)
            density_analysis = system.detector.analyze_grass_density(mask)
            
            # Cria visualiza√ß√£o
            viz = system.visualizer.create_detailed_analysis_panel(
                image, mask, stats, density_analysis)
            
            # Salva resultado
            output_path = system.output_dir / f"result_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
            system.visualizer.save_visualization(viz, str(output_path))
            
            print(f"Resultado salvo: {output_path}")
            print(f"Cobertura: {stats['coverage_percentage']:.2f}%")
        else:
            print("Erro ao carregar imagem")
    
    elif args.batch:
        print(f"An√°lise em lote: {args.batch}")
        # Implementar an√°lise em lote via linha de comando
        system.batch_analysis()
    
    else:
        # Modo interativo
        system.run()


if __name__ == "__main__":
    main()